{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-transitscope-baltimore-pipeline","text":"<p>A prefect collection to handle data uploads to transitscope-baltimore</p>"},{"location":"#resources","title":"Resources","text":"<p>For more tips on how to use tasks and flows in a Collection, check out Using Collections!</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-transitscope-baltimore-pipeline</code> with <code>pip</code>:</p> <pre><code>pip install prefect-transitscope-baltimore-pipeline\n</code></pre> <p>Requires an installation of Python 3.8+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-transitscope-baltimore-pipeline</code>, feel free to open an issue in the prefect-transitscope-baltimore-pipeline repository.</p> <p>If you have any questions or issues while using <code>prefect-transitscope-baltimore-pipeline</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-transitscope-baltimore-pipeline</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-transitscope-baltimore-pipeline</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code>pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <pre><code>pre-commit install\n</code></pre></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-transitscope-baltimore-pipeline</code>.</p>"},{"location":"examples_catalog/#tasks-module","title":"Tasks Module","text":"<p>df = await scrape() print(df.head())      Date  Route  Ridership 0  01/2023    103       3916 1  01/2023    105       3530 2  01/2023    115       4179 3  01/2023    120       3887 4  01/2023    150       1833</p>"},{"location":"flows/","title":"Flows","text":""},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows","title":"<code>prefect_transitscope_baltimore_pipeline.flows</code>","text":"<p>This is an example flows module</p>"},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows-functions","title":"Functions","text":""},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows.mta_bus_stops_flow","title":"<code>mta_bus_stops_flow</code>","text":"<p>This is an asynchronous function that uploads the MTA bus ridership data to an S3 bucket.</p> <p>The function performs the following steps: 1. Loads the AWS access key ID and secret access key from secrets 2. Creates a session with AWS using the loaded credentials 3. Creates an S3 resource object using the session 4. Uploads the MTA bus ridership data (in parquet format) to the specified S3 bucket</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>prefect_transitscope_baltimore_pipeline/flows.py</code> <pre><code>@flow\ndef mta_bus_stops_flow():\n    \"\"\"\n    This is an asynchronous function that uploads the MTA bus ridership data to an S3 bucket.\n\n    The function performs the following steps:\n    1. Loads the AWS access key ID and secret access key from secrets\n    2. Creates a session with AWS using the loaded credentials\n    3. Creates an S3 resource object using the session\n    4. Uploads the MTA bus ridership data (in parquet format) to the specified S3 bucket\n\n    Returns:\n        None\n    \"\"\"\n    # First task to download MTA bus stops data\n    stops = download_mta_bus_stops()\n\n    # Second task to transform the MTA bus stops data\n    transformed_stops = transform_mta_bus_stops(stops)\n    transformed_stops.to_parquet(\"data/mta_bus_stops.parquet\")\n    print(\"MTA bus stops data processing complete.\")\n    return transformed_stops\n</code></pre>"},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows.run_all_prefect_transitscope_baltimore_pipeline_flows","title":"<code>run_all_prefect_transitscope_baltimore_pipeline_flows</code>  <code>async</code>","text":"<p>This is an asynchronous function that runs all the flows in the module.</p> <p>The function performs the following steps: 1. Runs the scrape_and_transform_bus_route_ridership flow 2. Runs the upload_mta_bus_ridership_to_s3 flow 3. Runs the mta_bus_stops_flow flow 4. Runs the upload_mta_bus_stops_to_s3 flow</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>prefect_transitscope_baltimore_pipeline/flows.py</code> <pre><code>@flow\nasync def run_all_prefect_transitscope_baltimore_pipeline_flows():\n    \"\"\"\n    This is an asynchronous function that runs all the flows in the module.\n\n    The function performs the following steps:\n    1. Runs the scrape_and_transform_bus_route_ridership flow\n    2. Runs the upload_mta_bus_ridership_to_s3 flow\n    3. Runs the mta_bus_stops_flow flow\n    4. Runs the upload_mta_bus_stops_to_s3 flow\n\n    Returns:\n        None\n    \"\"\"\n    await scrape_and_transform_bus_route_ridership()\n    await upload_mta_bus_ridership_to_s3()\n    mta_bus_stops_flow()\n    await upload_mta_bus_stops_to_s3()\n    print(\"All flows completed successfully.\")\n    return None\n</code></pre>"},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows.scrape_and_transform_bus_route_ridership","title":"<code>scrape_and_transform_bus_route_ridership</code>  <code>async</code>","text":"<p>This is an asynchronous function that scrapes bus ridership data, transforms it, and writes it to a parquet file.</p> <p>The function performs the following steps: 1. Scrapes the data 2. Standardizes the column names 3. Formats the bus routes 4. Converts the date and calculates the end of the month 5. Excludes zero ridership 6. Calculates the days and daily ridership 7. Writes the transformed data to a parquet file</p> <p>Returns:</p> Name Type Description <code>DataFrame</code> <p>The transformed bus ridership data.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/flows.py</code> <pre><code>@flow\nasync def scrape_and_transform_bus_route_ridership():\n    \"\"\"\n    This is an asynchronous function that scrapes bus ridership data,\n    transforms it, and writes it to a parquet file.\n\n    The function performs the following steps:\n    1. Scrapes the data\n    2. Standardizes the column names\n    3. Formats the bus routes\n    4. Converts the date and calculates the end of the month\n    5. Excludes zero ridership\n    6. Calculates the days and daily ridership\n    7. Writes the transformed data to a parquet file\n\n    Returns:\n        DataFrame: The transformed bus ridership data.\n    \"\"\"\n    # Executing the main function\n    bus_ridership_data = await scrape()\n    bus_ridership_data = standardize_column_names_task(bus_ridership_data)\n    bus_ridership_data = format_bus_routes_task(bus_ridership_data)\n    bus_ridership_data = convert_date_and_calculate_end_of_month(\n        bus_ridership_data\n    )\n    bus_ridership_data = exclude_zero_ridership(bus_ridership_data)\n    bus_ridership_data = calculate_days_and_daily_ridership(bus_ridership_data)\n    print(bus_ridership_data.head())\n\n    # Write parquet file to local directory\n    bus_ridership_data.to_parquet(\"data/mta_bus_ridership.parquet\")\n    return bus_ridership_data\n</code></pre>"},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows.upload_mta_bus_ridership_to_s3","title":"<code>upload_mta_bus_ridership_to_s3</code>  <code>async</code>","text":"<p>This is an asynchronous function that uploads the MTA bus ridership data to an S3 bucket.</p> <p>The function performs the following steps: 1. Loads the AWS access key ID and secret access key from secrets 2. Creates a session with AWS using the loaded credentials 3. Creates an S3 resource object using the session 4. Uploads the MTA bus ridership data (in parquet format) to the specified S3 bucket</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>prefect_transitscope_baltimore_pipeline/flows.py</code> <pre><code>@flow\nasync def upload_mta_bus_ridership_to_s3():\n    \"\"\"\n    This is an asynchronous function that uploads the MTA bus ridership data to an S3 bucket.\n\n    The function performs the following steps:\n    1. Loads the AWS access key ID and secret access key from secrets\n    2. Creates a session with AWS using the loaded credentials\n    3. Creates an S3 resource object using the session\n    4. Uploads the MTA bus ridership data (in parquet format) to the specified S3 bucket\n\n    Returns:\n        None\n    \"\"\"\n    aws_access_key_id_block = await Secret.load(\"aws-access-key-id\")\n    # Access the stored secret\n    aws_access_key_id = aws_access_key_id_block.get()\n    aws_secret_access_key_block = await Secret.load(\"aws-secret-access-key\")\n    # Access the stored secret\n    aws_secret_access_key = aws_secret_access_key_block.get()\n\n    session = boto3.Session(\n        aws_access_key_id=aws_access_key_id,\n        aws_secret_access_key=aws_secret_access_key,\n    )\n\n    s3 = session.resource(\"s3\")\n    path = Path(\"data/mta_bus_ridership.parquet\")\n    # Upload the parquet file to the S3 bucket\n    s3.meta.client.upload_file(\n        Filename=str(path),\n        Bucket=\"transitscope-baltimore\",\n        Key=\"data/mta_bus_ridership.parquet\",\n    )\n</code></pre>"},{"location":"flows/#prefect_transitscope_baltimore_pipeline.flows.upload_mta_bus_stops_to_s3","title":"<code>upload_mta_bus_stops_to_s3</code>  <code>async</code>","text":"<p>Asynchronous function to upload MTA bus stops data to an S3 bucket.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/flows.py</code> <pre><code>@flow\nasync def upload_mta_bus_stops_to_s3():\n    \"\"\"\n    Asynchronous function to upload MTA bus stops data to an S3 bucket.\n    \"\"\"\n    aws_access_key_id = await Secret.load(\"aws-access-key-id\").get()\n    aws_secret_access_key = await Secret.load(\"aws-secret-access-key\").get()\n\n    session = boto3.Session(\n        aws_access_key_id=aws_access_key_id,\n        aws_secret_access_key=aws_secret_access_key,\n    )\n\n    s3 = session.resource(\"s3\")\n    path = Path(\"data/mta_bus_stops.parquet\")\n    s3.meta.client.upload_file(\n        Filename=path,\n        Bucket=\"transitscope-baltimore\",\n        Key=\"data/mta_bus_stops.parquet\",\n    )\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks","title":"<code>prefect_transitscope_baltimore_pipeline.tasks</code>","text":"<p>This is an example tasks module</p>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks-functions","title":"Functions","text":""},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.calculate_days_and_daily_ridership","title":"<code>calculate_days_and_daily_ridership</code>","text":"<p>Task to calculate number of days in the month and daily ridership.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef calculate_days_and_daily_ridership(bus_ridership_data):\n    \"\"\"Task to calculate number of days in the month and daily ridership.\"\"\"\n    bus_ridership_data[\"days_in_month\"] = bus_ridership_data[\"date\"].apply(\n        calculate_days_in_month\n    )\n    bus_ridership_data[\"daily_ridership\"] = (\n        bus_ridership_data[\"ridership\"] / bus_ridership_data[\"days_in_month\"]\n    )\n    return bus_ridership_data\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.calculate_days_in_month","title":"<code>calculate_days_in_month</code>","text":"<p>Calculate the number of days in a given month.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>def calculate_days_in_month(date_value):\n    \"\"\"Calculate the number of days in a given month.\"\"\"\n    last_day_of_month = dt.datetime(\n        date_value.year,\n        date_value.month,\n        calendar.monthrange(date_value.year, date_value.month)[1],\n    )\n    return last_day_of_month.day\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.convert_date_and_calculate_end_of_month","title":"<code>convert_date_and_calculate_end_of_month</code>","text":"<p>Task to convert date column to datetime format and calculate end date of month.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef convert_date_and_calculate_end_of_month(bus_ridership_data):\n    \"\"\"Task to convert date column to datetime format and calculate end date of month.\"\"\"\n    bus_ridership_data[\"date\"] = pd.to_datetime(\n        bus_ridership_data[\"date\"], format=\"%m/%Y\"\n    )\n    bus_ridership_data[\"end_of_month_date\"] = bus_ridership_data[\n        \"date\"\n    ] + pd.offsets.MonthEnd(0)\n    return bus_ridership_data\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.download_mta_bus_stops","title":"<code>download_mta_bus_stops</code>","text":"<p>Downloads and processes data for MTA bus stops in Maryland.</p> <p>This function retrieves the metadata from the Maryland Transit FeatureServer, extracting the description of the data. It then downloads the MTA bus stops data in GeoJSON format, standardizes the column names, adds a description from the metadata, and appends the current download date and time to each record.</p> <p>Returns:</p> Name Type Description <code>GeoDataFrame</code> <p>A GeoDataFrame containing the MTA bus stops data with standardized</p> <p>column names, the data source description, and the download date and time.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef download_mta_bus_stops():\n    \"\"\"\n    Downloads and processes data for MTA bus stops in Maryland.\n\n    This function retrieves the metadata from the Maryland Transit FeatureServer,\n    extracting the description of the data. It then downloads the MTA bus stops data\n    in GeoJSON format, standardizes the column names, adds a description from the metadata,\n    and appends the current download date and time to each record.\n\n    Returns:\n        GeoDataFrame: A GeoDataFrame containing the MTA bus stops data with standardized\n        column names, the data source description, and the download date and time.\n    \"\"\"\n    metadata_url = \"https://geodata.md.gov/imap/rest/services/Transportation/MD_Transit/FeatureServer/9?f=pjson\"\n    metadata_response = requests.get(metadata_url, timeout=10)\n    if metadata_response.status_code == 200:\n        description = metadata_response.json().get(\n            \"description\", \"No description available\"\n        )\n        print(\"Description from Metadata:\", description)\n    else:\n        print(\"Failed to retrieve metadata\")\n        description = \"No description available\"\n\n    stops = gpd.read_file(\n        \"https://geodata.md.gov/imap/rest/services/Transportation/MD_Transit/FeatureServer/9/query?where=1%3D1&amp;outFields=*&amp;outSR=4326&amp;f=geojson\"\n    )\n    stops = standardize_column_names(stops)\n    stops[\"data_source_description\"] = description\n    stops[\"download_date\"] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return stops\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.exclude_zero_ridership","title":"<code>exclude_zero_ridership</code>","text":"<p>Task to exclude rows with zero ridership.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef exclude_zero_ridership(bus_ridership_data):\n    \"\"\"Task to exclude rows with zero ridership.\"\"\"\n    bus_ridership_data = bus_ridership_data[\n        bus_ridership_data[\"ridership\"] &gt; 0\n    ]\n    return bus_ridership_data\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.format_bus_routes","title":"<code>format_bus_routes</code>","text":"<p>Format bus route strings, capitalizing CityLink routes.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>def format_bus_routes(bus_routes_str):\n    \"\"\"Format bus route strings, capitalizing CityLink routes.\"\"\"\n    citylink_pattern = re.compile(\"CityLink ([A-Z]+)\")\n    formatted_routes = [\n        citylink_pattern.sub(\n            lambda match: \"CityLink \" + match.group(1).title(),\n            route.strip(),\n        )\n        for route in bus_routes_str.split(\",\")\n    ]\n    return \", \".join(formatted_routes)\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.format_bus_routes_task","title":"<code>format_bus_routes_task</code>","text":"<p>Task to format bus route strings, capitalizing CityLink routes.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef format_bus_routes_task(bus_ridership_data):\n    \"\"\"Task to format bus route strings, capitalizing CityLink routes.\"\"\"\n    bus_ridership_data[\"route\"] = bus_ridership_data[\"route\"].apply(\n        format_bus_routes\n    )\n    return bus_ridership_data\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.map_color_to_citylink","title":"<code>map_color_to_citylink</code>","text":"<p>The function <code>map_color_to_citylink</code> maps a color to a corresponding citylink or returns the color itself if no mapping is found.</p> <p>:param color: The color parameter is a string representing a color :return: the value associated with the given color in the <code>color_to_citylink</code> dictionary. If the color is not found in the dictionary, it will return the color itself.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>def map_color_to_citylink(color):\n    \"\"\"\n    The function `map_color_to_citylink` maps a color to a corresponding citylink or returns the color\n    itself if no mapping is found.\n\n    :param color: The color parameter is a string representing a color\n    :return: the value associated with the given color in the `color_to_citylink` dictionary. If the\n    color is not found in the dictionary, it will return the color itself.\n    \"\"\"\n    return color_to_citylink.get(color, color)\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.scrape","title":"<code>scrape</code>  <code>async</code>","text":"<p>Scrape data from the MTA Maryland Performance Improvement website and return it as a pandas DataFrame.</p> <p>Returns:</p> Type Description <p>pandas.DataFrame: The scraped data as a DataFrame with columns: 'Date', 'Route', and 'Ridership'.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; df = await scrape()\n&gt;&gt;&gt; print(df.head())\n     Date  Route  Ridership\n0  01/2023    103       3916\n1  01/2023    105       3530\n2  01/2023    115       4179\n3  01/2023    120       3887\n4  01/2023    150       1833\n</code></pre> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\nasync def scrape():\n    \"\"\"\n    Scrape data from the MTA Maryland Performance Improvement website and return it as a pandas DataFrame.\n\n    Returns:\n        pandas.DataFrame: The scraped data as a DataFrame with columns: 'Date', 'Route', and 'Ridership'.\n\n    Examples:\n        &gt;&gt;&gt; df = await scrape()\n        &gt;&gt;&gt; print(df.head())\n             Date  Route  Ridership\n        0  01/2023    103       3916\n        1  01/2023    105       3530\n        2  01/2023    115       4179\n        3  01/2023    120       3887\n        4  01/2023    150       1833\n    \"\"\"\n\n    # Launching the browser and setting up a new page\n    browser = await launch(\n        handleSIGINT=False, handleSIGTERM=False, handleSIGHUP=False\n    )\n\n    page = await browser.newPage()\n    await page.setViewport({\"width\": 1920, \"height\": 1080})\n    await page.goto(\"https://www.mta.maryland.gov/performance-improvement\")\n\n    # Interacting with elements on the page\n    await page.click(\"h3#ui-id-5\")\n    csvString = \"\"\n\n    # Selecting and processing data from dropdown options\n    routeSelectSelector = 'select[name=\"ridership-select-route\"]'\n    routeSelectOptions = await page.evaluate(\n        \"\"\"() =&gt; Array.from(document.querySelectorAll('select[name=\"ridership-select-route\"] option')).map(option =&gt; option.value)\"\"\"\n    )\n    print(f\"Route select options: {routeSelectOptions}\")\n\n    monthSelectSelector = 'select[name=\"ridership-select-month\"]'\n    monthSelectOptions = await page.evaluate(\n        \"\"\"() =&gt; Array.from(document.querySelectorAll('select[name=\"ridership-select-month\"] option')).map(option =&gt; option.value)\"\"\"\n    )\n    print(f\"Month select options: {monthSelectOptions}\")\n\n    yearSelectSelector = 'select[name=\"ridership-select-year\"]'\n    yearSelectOptions = await page.evaluate(\n        \"\"\"() =&gt; Array.from(document.querySelectorAll('select[name=\"ridership-select-year\"] option')).map(option =&gt; option.value)\"\"\"\n    )\n    print(f\"Year select options: {yearSelectOptions}\")\n    # Now, we need to click on the 'submit' button to get the data\n    # example: &lt;button class=\"btn btn-default btn-submit btn-ridership\" type=\"submit\" name=\"submit\"&gt;Submit&lt;/button&gt;\n    # await page.click('button.btn.btn-default.btn-submit.btn-ridership')\n\n    # Looping through options to generate CSV data\n    hasIncludedRowHeaders = True\n    for yearSelectOption in tqdm(\n        yearSelectOptions, position=0, leave=False, desc=\"Years\"\n    ):\n        await page.focus(yearSelectSelector)\n        await page.select(yearSelectSelector, yearSelectOption)\n\n        for monthSelectOption in tqdm(\n            monthSelectOptions, position=1, leave=False, desc=\"Months\"\n        ):\n            await page.focus(monthSelectSelector)\n            await page.select(monthSelectSelector, monthSelectOption)\n            # Printing the selected option\n            # tqdm.write(f\"Selected month: {monthSelectOption}\")\n            await page.keyboard.press(\"Tab\")\n            await page.keyboard.press(\"Tab\")\n\n            # Waiting for network responses after form submission\n            await asyncio.gather(\n                # page.keyboard.press('Enter'),\n                page.click(\"button.btn.btn-default.btn-submit.btn-ridership\"),\n                # Wait for 1 second after clicking the button\n                page.waitFor(500),\n                # page.waitForNavigation(),\n                # page.waitForNavigation({'waitUntil': 'networkidle2', 'timeout': 30000})s\n            )\n            # navigationPromise = async.ensure_future(page.waitForNavigation())\n            # await page.click('a.my-link')  # indirectly cause a navigation\n            # await navigationPromise  # wait until navigation finishes\n            # Concatenating CSV string for each selection\n            csvString += await computeCsvStringFromTable(\n                page,\n                \"div#container-ridership-table &gt; table\",\n                hasIncludedRowHeaders,\n            )\n\n            if hasIncludedRowHeaders:\n                hasIncludedRowHeaders = False\n\n    # Closing the browser\n    await browser.close()\n\n    # Converting the CSV string to a pandas dataframe\n    df = pd.read_csv(StringIO(csvString))\n\n    # Writing the CSV string to a file\n    # with open(\"mta_bus_ridership.csv\", \"w\") as file:\n    #     file.write(csvString)\n\n    return df\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.standardize_column_names","title":"<code>standardize_column_names</code>","text":"<p>Standardize DataFrame column names to lowercase with underscores.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>def standardize_column_names(data_frame):\n    \"\"\"Standardize DataFrame column names to lowercase with underscores.\"\"\"\n    data_frame.columns = (\n        data_frame.columns.str.strip().str.lower().str.replace(\" \", \"_\")\n    )\n    return data_frame\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.standardize_column_names_task","title":"<code>standardize_column_names_task</code>","text":"<p>Task to standardize DataFrame column names to lowercase with underscores.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef standardize_column_names_task(data_frame):\n    \"\"\"Task to standardize DataFrame column names to lowercase with underscores.\"\"\"\n    return standardize_column_names(data_frame)\n</code></pre>"},{"location":"tasks/#prefect_transitscope_baltimore_pipeline.tasks.transform_mta_bus_stops","title":"<code>transform_mta_bus_stops</code>","text":"<p>Transforms a GeoDataFrame containing MTA bus stops data.</p> <p>This function performs several transformations on the MTA bus stops data:</p> <ul> <li>Extracts latitude and longitude from the 'geometry' field.</li> <li>Processes the 'routes_served' field to standardize route information. This involves splitting the routes on commas and semicolons, mapping each route to a color using the 'map_color_to_citylink' function, and consolidating routes served per stop.</li> <li>Rearranges the columns, placing 'routes_served' into a specific position.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>A GeoDataFrame containing MTA bus stops data with fields including 'geometry' and 'routes_served'.</p> required <p>Returns:</p> Name Type Description <code>GeoDataFrame</code> <p>The transformed GeoDataFrame with additional latitude and longitude fields, and a modified 'routes_served' field reflecting individual routes served per bus stop.</p> Source code in <code>prefect_transitscope_baltimore_pipeline/tasks.py</code> <pre><code>@task\ndef transform_mta_bus_stops(gdf):\n    \"\"\"\n    Transforms a GeoDataFrame containing MTA bus stops data.\n\n    This function performs several transformations on the MTA bus stops data:\n\n    - Extracts latitude and longitude from the 'geometry' field.\n    - Processes the 'routes_served' field to standardize route information. This involves splitting the routes on commas and semicolons, mapping each route to a color using the 'map_color_to_citylink' function, and consolidating routes served per stop.\n    - Rearranges the columns, placing 'routes_served' into a specific position.\n\n    Parameters:\n        gdf (GeoDataFrame): A GeoDataFrame containing MTA bus stops data with fields including 'geometry' and 'routes_served'.\n\n    Returns:\n        GeoDataFrame: The transformed GeoDataFrame with additional latitude and longitude fields, and a modified 'routes_served' field reflecting individual routes served per bus stop.\n\n    Raises:\n        Any exceptions raised by the function are not explicitly mentioned in the docstring.\n    \"\"\"\n\n    gdf[\"latitude\"] = gdf[\"geometry\"].y\n    gdf[\"longitude\"] = gdf[\"geometry\"].x\n    route_stop = gdf[[\"stop_id\", \"routes_served\"]].copy()\n\n    # We need to split on commas and semicolons\n    route_stop[\"routes_served\"] = route_stop[\"routes_served\"].str.split(\",\")\n    route_stop = route_stop.explode(\"routes_served\")\n    # Split on semicolons\n    route_stop[\"routes_served\"] = route_stop[\"routes_served\"].str.split(\";\")\n    route_stop = route_stop.explode(\"routes_served\")\n    route_stop[\"routes_served\"] = route_stop[\"routes_served\"].str.strip()\n    # Apply the function to the 'routes_served' column\n    route_stop[\"routes_served\"] = route_stop[\"routes_served\"].apply(\n        map_color_to_citylink\n    )\n    # Re-join the routes served by stop into a df with one row per stop: route_stop, routes_served\n    route_stop = (\n        route_stop.groupby(\"stop_id\")[\"routes_served\"]\n        .apply(list)\n        .reset_index()\n    )\n    # Remove the brackets from the list of routes served\n    route_stop[\"routes_served\"] = route_stop[\"routes_served\"].str.strip(\"[]\")\n    # Drop routes_served from the original gdf\n    gdf = gdf.drop(columns=[\"routes_served\"])\n    # Merge the routes served by stop back into the original gdf\n    gdf = gdf.merge(route_stop, on=\"stop_id\", how=\"left\")\n    # Shift routes_served to position 6\n    gdf.insert(6, \"routes_served\", gdf.pop(\"routes_served\"))\n    return gdf\n</code></pre>"}]}